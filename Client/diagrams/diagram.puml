@startuml
class Accelerometer {
            Accelerometer()
            void setup()
            float getTemperature()
            float getAccelerationX()
            float getAccelerationY()
            float getAccelerationZ()
            float getGyroX()
            float getGyroY()
            float getGyroZ()
            void setClient(WiFiClient client)
            void run()
            void send()
            void print()
            WiFiClient _client
            Adafruit_MPU6050 _mpu
            float _temp
            float _accX
            float _accY
            float _accZ
            float _gyroX
            float _gyroY
            float _gyroZ
    }

class Ear {
            Ear()
            Ear(int pin)
            void action()
            void connect()
            void disconnect()
            void caress()
            void hug()
            void shake()
            WiFiClient _client
            int _pin
            Servo _servo
            int _angle
    }

    class LongFSR {
            LongFSR()
            LongFSR(WiFiClient client, int pin, int trigger)
            WiFiClient getClient()
            int getTrigger()
            bool isActive()
            void setClient(WiFiClient client)
            void setActive(bool active)
            void send()
            void run()
            WiFiClient _client
            int _pin
            int _trigger
            bool _active
    }

    class SmallFSR {
            SmallFSR()
            SmallFSR(int pin, int trigger, int duration)
            unsigned long getActivationTime()
            bool isActive()
            int getDuration()
            WiFiClient getClient()
            void setActive(bool isActive)
            void setActivationTime()
            void setClient(WiFiClient client)
            void send()
            void run()
            WiFiClient _client
            int _pin
            int _trigger
            int _duration
            int _step
            bool _active 
            unsigned long _activationTime
    }

    class Speaker{
            Speaker()
            void setup()
            void networkConnectionAttempt()
            void jacketConnectionAttempt()
            void connect()
            void caress()
            void hug()
            void shake()
            void disconnect()
            DFRobotDFPlayerMini _myDFPlayer
            int selectRandomAudio(int startingIndex, int finishingIndex)
    }

    class WiFiConnection {
            WiFiConnection()
            int getPort()
            char* getHost()
            char* getssid()
            char* getPassword()
            WiFiClient getClient()
            void setup()
            void connect()
            void ping(WiFiClient client)
            char* _ssid 
            char* _password 
            char* _host 
            int _port 
            WiFiClient _client
    }

    class CaressHandler {
            CaressHandler(SmallFSR smallFSR1, SmallFSR smallFSR2, SmallFSR smallFSR3, Ear ear1, Ear ear2)
            WiFiClient getClient()
            unsigned long getActivationTime()
            int getDuration()
            bool getReady()
            void setClient(WiFiClient client)
            void setActivationTime(unsigned long activationTime)
            void setReady(bool ready)
            void setSpeaker(Speaker speaker)
            void run()
            WiFiClient _client
            int _duration
            SmallFSR _smallFSR1
            SmallFSR _smallFSR2
            SmallFSR _smallFSR3
            Speaker _speaker
            Ear _ear1
            Ear _ear2
            unsigned long _activationTime 
            bool _ready
            
    }

    class HugHandler {
        public:
            HugHandler(LongFSR, Ear ear1, Ear ear2)
            WiFiClient getClient()
            void setClient(WiFiClient client)
            void setSpeaker(Speaker speaker)
            void run()
        private:
            WiFiClient _client
            int _duration
            LongFSR _longFSR
            Speaker _speaker
            Ear _ear1
            Ear _ear2            
    }


    class ShakeHandler {
            ShakeHandler(int duration, Ear ear1, Ear ear2)
            WiFiClient getClient()
            unsigned long getActivationTime()
            int getDuration()
            Accelerometer getAccelerometer()
            void setClient(WiFiClient client)
            void setActivationTime()
            void setSpeaker(Speaker speaker)
            void setAccelerometer(Accelerometer accelerometer)
            void run()
            WiFiClient _client
            int _duration
            Accelerometer _accelerometer
            Speaker _speaker
            Ear _ear1
            Ear _ear2
            bool _isShaking 
            unsigned long _activationTime
    }

@enduml